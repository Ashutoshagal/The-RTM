<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/html">
<head>
<title>Csqaures</title>
    <link rel="shortcut icon" href="fonts/c2icon.jpg" />
    <!--Import Google Icon Font-->
    <link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!--Import materialize.css-->
    <link href="css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
    <link href="css/style.css" type="text/css" rel="stylesheet" media="screen,projection"/>
    <!--Let browser know website is optimized for mobile-->
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0"/>
<!--


class HomePageController extends Controller
{
    public function index(Request $request)
    {
        $url  = $request->request->get('url');
        $check_url = self::checkValidityOfUrl($url);
        if($check_url == true){
            $domain      = self::getDomain($url);
            $check       = GetWebUrls::where('domain',$domain)->value('domain');
            if(empty($check)){
                self::storeUrl($domain,$url);
            }
            self::startTest($url);
            RankHelper::accessibilitySaver($domain);
        }
        else{
            return 'Please enter a valid url';
        }

    }

    public static function getDomain($url)
    {
        $get_domain  = League\Url\Url::createFromUrl(urldecode($url));
        $host_obj    = $get_domain->getHost();
        return $host_obj->get();
    }

     public static function checkValidityOfUrl($url)
     {
         if (!filter_var($url, FILTER_VALIDATE_URL) === false) {
             return true;
         } else {
             return false;
         }
     }

    public static function storeUrl($domain,$url)
    {
        $web_url         = new GetWebUrls();
        $web_url->domain = $domain;
        $web_url->url    = $url;
        $web_url->accessibility = null;
        $web_url->save();
    }

    public static function startTest($url)
    {
        $domain = self::getDomain($url);
        $image = TestHelper::imageTest($url);
        SaveHelper::saveImage($image,$domain);
        $lang  = TestHelper::langTest($url);
        SaveHelper::saveLang($lang,$domain);
        $label  = TestHelper::labelTest($url);
        SaveHelper::saveLabel($label,$domain);
        $link  = TestHelper::linkTest($url);
        SaveHelper::saveLink($link,$domain);
        $caption  = TestHelper::Tablecaptiontest($url);
        SaveHelper::saveTable($caption,$domain);
        $clickhere  = TestHelper::clickHereTest($url);
        SaveHelper::saveClickhere($clickhere,$domain);
        $aria  = TestHelper::arialLandMarkTest($url);
        SaveHelper::saveAria($aria,$domain);
        $marq  = TestHelper::marqueeTest($url);
        SaveHelper::saveMarquee($marq,$domain);
        $blink  = TestHelper::blinkTest($url);
        SaveHelper::saveBlink($blink,$domain);
        $field = TestHelper::fieldSetTest($url);
        SaveHelper::saveFieldset($field,$domain);
        $long = TestHelper::longDescTest($url);
        SaveHelper::saveLongdesc($long,$domain);
        $video = TestHelper::videoTest($url);
        SaveHelper::saveVideo($video,$domain);
    }
}

-->
</head>

<body>
<!--

        public function content(Request $request

        //insert data with weburlid in different tables

            $urls = new Getweburls();
            $count = \DB::table('weburls')->count();
            $geturlid = $urls->get();
            for($i=0;$i<$count;$i++) {
            $urlid = $geturlid[$i]->id;
            $url = $geturlid[$i]->web_url;
            $urltxt = $geturlid[$i]->weburl_textfile;
            self::mj($urlid, $url, $urltxt);
        }
        $rankall = self::accessibilityranking($count);
        $together = array($rankall,$count);
        return view('welcome')->with('data',$together);

        public function mj($urlid,$url,$urltxt)
   
        $Imagewtg[] = self::Imagetest($urltxt);
        $objimg = new Insertimgwtg();
        $objimg->weburl_id = $urlid;
        $objimg->total_image = $Imagewtg[0][0];
        $objimg->total_alt = $Imagewtg[0][1];
        $objimg->image_weightage = $Imagewtg[0][2];
        $objimg->save();
---------------------------------------------------------
    $objimg = new Insertimgwtg();
    $imagedata = $objimg->where('weburl_id', $urlid)->get();
    $imageresult[0] = $imagedata[0]->total_image;
    $imageresult[1] = $imagedata[0]->total_alt;
    $imageresult[2] = $imagedata[0]->image_weightage;
          
    $allinone = new \stdClass();
    $allinone->web_url = $weburlresult[0];
    $allinone->total_images = $imageresult[0];
    $allinone->total_alts = $imageresult[1];
    $allinone->image_weightage = $imageresult[2];
   
 {{$data[0]->accessibility[$i]}}
 @php ($variable = $data[0]->weburl_id[$i])
 <a href="{{route("report","key=$variable")}}">View Report</a>
  Route::any('/report',['as'=>'report','uses'=> 'ReportController@Individual_report']);
  public function Individual_report(Request $request)
    {

        $urlid = $request->input('key');
        //echo $name;
        $individualreport = new Getallvalues();
        $urlreport = $individualreport->getallvalues($urlid);
       return view('report')->with('allvalues',$urlreport);
       // echo $urlreport->total_images;
    }                        


--------------------
-->
<nav class="#ba68c8 purple lighten-2">
   <div class="nav-wrapper">
        <img src="fonts/logo.png" class="responsive-img" width="80" height="80"  />
        <a href="#" class="brand-logo" style=" padding-left: 70px;font-style: oblique">C<sup style="font-size: 20px;font-style: oblique;font-family:cursive">Squares</sup></a>
        <a href="#" data-activates="mobile-demo" class="button-collapse"><i class="material-icons">menu</i></a>
        <ul class="side-nav" id="mobile-demo">
            <li><a href="#">Home</a></li>
            <li><a href="about.php">About Us</a></li>
            <li><a href="contact.php">Contact Us</a></li>


        </ul>
        <ul id="nav-mobile" class="right hide-on-med-and-down">
            <li><a href="#">Home</a></li>
            <li><a href="about.php">About Us</a></li>
            <li><a href="contact.php">Contact Us</a></li>

        </ul>
    </div>
</nav>
<div class="container">
<div class="row">

    <div class="col s12 m6 l7 ">
        <form class="col s12" action="action.php" method="post">
            <br>
            <br>
            <br>

            <div class="row">
                <div class="input-field col s4">
                    <i class="material-icons prefix">account_circle</i>
                    <input name="user_email" id="icon_prefix" type="text" class="validate" required>
                    <label for="icon_prefix">Email</label>
                </div>
                <div class="input-field col s4">
                    <i class="material-icons prefix">lock</i>
                    <input name="user_password" id="icon_telephone" type="password" class="validate">
                    <input name="login" id="icon_telephone" type="hidden" value="login" class="validate" required>
                    <label for="icon_telephone">Password</label>
                </div>
                <div class="input-field col s4">
                    <button class="btn waves-effect waves-light #ba68c8 purple lighten-2" type="submit" name="action">LOGIN
                        <i class="material-icons right">send</i><br>

                    </button>
                    <br>
                    <br>
                    <a href="">ForgotPassword?</a>
                    <br>
                    <br>

                </div>
            </div>
            <br>

         <blockquote>

             <p class="center">
             <h5 class="purple-text">

                 Career Choices Are Life Choices Take Them Seriously. <img src="fonts/child.jpg" class="responsive-img">
             <b class="purple-text"><h5>&nbsp;What after 10th ? ...  <br><u><a href="#" class="brand-logo" style=" padding-left: 0px;font-style: oblique"><b>C</b><sup style="font-size: 18px;font-style: oblique;font-family:cursive">Square</sup></a> is here to help you!</u></h5></p>

         </blockquote>
    </form>
  </div>
    <div class="col s12 m1 l1 ">
        </div>
    <div class="col s12 m5 l4">

        <br>
        <br>
        <br>

        <div class="row">
            <img src="fonts/child1.png" class="responsive-img">
            <br>
            <form class="col s12" action="action.php" method="post">
                <div class="row">

                    <div class="input-field col s12">
                        <input name="user_name" id="name" type="text" class="validate" required>
                        <label for="name">Full Name</label>
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s12">
                        <input name="user_email" id="email" type="email" class="validate" required>
                        <label for="email">Email</label>
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s12">
                        <input name="user_password" id="password" type="password" class="validate" required>
                        <label for="password">Password</label>
                    </div>
                </div>
                <input name="controller" id="password" type="hidden" value="controller" class="validate">
                <input name="function" id="password" type="hidden" value="function" class="validate">
                <button class="btn waves-effect waves-light #ba68c8 purple lighten-2" type="submit" name="action">SIGNUP
            </form>
        <br>

    </div>



</div>

</div>
</div>

<br>
<br>


    <footer class="page-footer #ba68c8 purple lighten-2">
    <div class="footer-copyright">
        <div class="container center">
            Csquares© 2017 All rights reserved
        </div>
    </div>
</footer>
<!--Import jQuery before materialize.js-->
<script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
<script type="text/javascript" src="js/materialize.min.js"></script>
<script src="js/init.js"></script>
<script>
    $( document ).ready(function(){
        $(".button-collapse").sideNav();
    });
</script>
<!--

namespace App\RTM;


class TestHelper {
    const ARIA = 8;
    const BLINK = 6 ;
    const CLICK_HERE = 10;
    const FIELD_SET = 6 ;
    const ALT = 10 ;
    const LABEL = 10;
    const LANG = 6;
    const LINK = 10;
    const LONG_DESC = 8;
    const MARQUEE = 6;
    const TABLE_CAPTION = 10 ;
    const VIDEO = 10;


    public static function imageTest($url)
    {
        $page   = file_get_contents($url);
        $doc    = new \DOMDocument();
        @$doc->loadHtml($page);
        $count_image = 0;
        $count_alt   = 0;

        $tags = $doc->getElementsByTagName('img');
        foreach ($tags as $tag) {
            if ($tag->getAttribute('src')) {
                $count_image++;
            }
        }
        foreach ($tags as $tag) {
            if ($tag->getAttribute('alt')) {
                $count_alt++;
            }
        }
            $image_wtg = ($count_alt / $count_image) * (self::ALT);
            $image_obj = new \stdClass();
            $image_obj->count_image = $count_image;
            $image_obj->count_alt   = $count_alt;
            $image_obj->image_wtg   = $image_wtg;
        return $image_obj;
    }

    public static function langTest($url)
    {
        $page = file_get_contents($url);
        $doc = new \DOMDocument();
        @$doc->loadHtml($page);
        $count = 0;
        $tags= $doc->getElementsByTagName('html');

        foreach ($tags as $tag)
        {
            if($tag->getAttribute('lang'))
            {
                $lan = $tag->getAttribute('lang');
                $count++;
            }

        }

        if(empty($count))
        {
            $language =  "";
            $lang_wtg = (0*self::LANG);
            $language_existance = "No";
        }
        else
        {
            $lang_wtg = (1*self::LANG);
            $language_existance = "Yes";
            $language =  "$lan";

        }
        $lang_obj = new \stdClass();
        $lang_obj->lang_existance  = $language_existance;
        $lang_obj->lang = $language;
        $lang_obj->lang_wtg   = $lang_wtg;
        return $lang_obj;
    }

    public static function labelTest($url)
    {
        $counti=0;
        $countl=0;
        $page = file_get_contents($url);
        $doc = new \DOMDocument();
        @$doc->loadHtml($page);
        $tags = $doc->getElementsByTagName('form');

        foreach ($tags as $tag) {

            $tag = $doc->getElementsByTagName('input');
            if( $tag = $doc->getElementsByTagName('input'))
            {
                $counti++;
            }

        }
        $cinput = $counti;

        if (empty($cinput)) {

            $cinput = 0;
        }
        foreach ($tags as $tagv)
        {

            $tagv = $doc->getElementsByTagName('label');
            if( $tagv = $doc->getElementsByTagName('label'))
            {
                $countl++;
            }


        }
        $clabel = $countl;

        if (empty($clabel)) {
            $clabel = 0;
        }

        if($cinput == $clabel){

            if (empty($cinput)) {


                $label_wtg = self::LABEL;

            }
            else{

                $label_wtg = self::LABEL;
            }
        }
        else {


            $label_wtg = ($clabel / $cinput) * self::LABEL;
        }

        $label_obj = new \stdClass();
        $label_obj->total_input = $cinput;
        $label_obj->total_label = $clabel;
        $label_obj->label_wtg = $label_wtg;
        return $label_obj;

    }

    public static function linkTest($url)
    {
        $page = file_get_contents($url);
        $doc = new \DOMDocument();
        @$doc->loadHtml($page);
        $count_a   = 0;
        $count_alt = 0;
        $tags      = $doc->getElementsByTagName('a');
        foreach ($tags as $tag)
        {
            if($tag->getAttribute('href'))
            {
                $count_a++;
            }
        }
        foreach ($tags as $tag)
        {
            if($tag->getAttribute('alt'))
            {
                $count_alt++;

            }
        }
        if($count_a == $count_alt){

            if (empty($count_a)) {


                $countL = self::LINK;

            }
            else{

                $countL = self::LINK;
            }
        }
        else {
            $countL = ($count_alt / $count_a) * self::LINK;
        }

        $link_obj = new \stdClass();
        $link_obj->total_links = $count_a;
        $link_obj->total_alt = $count_alt;
        $link_obj->link_wtg = $countL;
        return $link_obj;



    }

    public  static function Tablecaptiontest($url)
    {
        $page  = file_get_contents($url);
        $doc   = new \DOMDocument();
        @$doc->loadHtml($page);
        $tags = $doc->getElementsByTagName('body');
        foreach ($tags as $tag) {
            $tag = $doc->getElementsByTagName('table');
        }

        $c_table = $tag->length;

        if (empty($c_table)) {

            $c_table = 0;
        }

        foreach ($tags as $tag_v)
        {

            $tag_v = $doc->getElementsByTagName('caption');

        }
        $c_caption =$tag_v->length ;

        if (empty($c_caption)) {

            $c_caption = 0;
        }
        if($c_table == $c_caption){

            if (empty($c_table)) {


                $countT = self::TABLE_CAPTION;

            }
            else{

                $countT = self::TABLE_CAPTION;
            }
        }
        else {

            $countT = ($c_caption / $c_table) * self::TABLE_CAPTION;

        }
        $table_obj = new Inserttablecaptionkwtg();
        $table_obj->total_tables = $c_table;
        $table_obj->total_captions = $c_caption;
        $table_obj->table_caption_wtg = $countT;
        return $table_obj;
    }

    public static function clickHereTest($url)
    {
        $html = file_get_contents($url);

        $count =1;

        $search_for_1 =  'click here';
        $search_for_2 =  'Click Here';
        $search_for_3 =  'Click here';
        $search_for_4 =  'read more';
        $search_for_5 =  'click here to read more';
        $search_for_6 =  'Click here to read more';

        // the following line prevents the browser from parsing this as HTML.
        header('Content-Type: text/plain');

        // get the file contents, assuming the file to be readable (and exist)
        $contents = $html;
        // escape special characters in the query
        $pattern1 = preg_quote($search_for_1, '/');
        $pattern2 = preg_quote($search_for_2, '/');
        $pattern3 = preg_quote($search_for_3, '/');
        $pattern4 = preg_quote($search_for_4, '/');
        $pattern5 = preg_quote($search_for_5, '/');
        $pattern6 = preg_quote($search_for_6, '/');

        // finalise the regular expression, matching the whole line
        $pattern1 = "/^.*$pattern1.*\$/m";
        $pattern2 = "/^.*$pattern2.*\$/m";
        $pattern3 = "/^.*$pattern3.*\$/m";
        $pattern4 = "/^.*$pattern4.*\$/m";
        $pattern5 = "/^.*$pattern5.*\$/m";
        $pattern6 = "/^.*$pattern6.*\$/m";

        // search, and store all matching occurences in $matches

        //$arrlength=count($searchfor);

        if(preg_match_all($pattern1, $contents, $matches1)){
            $count=0;
        }

        if(preg_match_all($pattern2, $contents, $matches2)){
            $count=0;
        }

        if(preg_match_all($pattern3, $contents, $matches3)){
            $count=0;
        }

        if(preg_match_all($pattern4, $contents, $matches4)){
            $count=0;
        }

        if(preg_match_all($pattern5, $contents, $matches5)){
            $count=0;
        }

        if(preg_match_all($pattern6, $contents, $matches6)){
            $count=0;
        }

        if($count==1)
        {
            $flag_e = "No";
            $click_here_wtg = self::CLICK_HERE;
        }
        else
        {
            $flag_e = "Yes";
            $click_here_wtg = (0 * self::CLICK_HERE);
        }

        $clickhere_obj = new \stdClass();
        $clickhere_obj->click_here_status = $flag_e;
        $clickhere_obj->click_here_wtg = $click_here_wtg;
        return $clickhere_obj;

    }

    public static function arialLandMarkTest($url)
    {
        $html = file_get_contents($url);

        $count_m = 0;
        $count_n = 0;

        $search_for_1 = 'role="main"';
        $search_for_2 = 'role="navigation"';

// the following line prevents the browser from parsing this as HTML.
        header('Content-Type: text/plain');

// get the file contents, assuming the file to be readable (and exist)
        $contents = $html;
// escape special characters in the query
        $pattern1 = preg_quote($search_for_1, '/');
        $pattern2 = preg_quote($search_for_2, '/');

// finalise the regular expression, matching the whole line
        $pattern1 = "/^.*$pattern1.*\$/m";
        $pattern2 = "/^.*$pattern2.*\$/m";

// search, and store all matching occurences in $matches
        if(preg_match_all($pattern1, $contents, $matches1)){
            $count_m++;
        }

        if(preg_match_all($pattern2, $contents, $matches2)){
            $count_n++;
        }
        if($count_m==0)
        {
            $count_m_wtg = (0 * self::ARIA);
        }
        else
        {
            $count_m_wtg = (0.5 * self::ARIA);
        }
        if($count_n==0)
        {
            $count_n_wtg = (0 * self::ARIA);
        }
        else
        {
            $count_n_wtg = (0.5 * self::ARIA);
        }
        $count = $count_m_wtg + $count_n_wtg;


        $aria_obj = new \stdClass();
        $aria_obj->main_wtg = $count_m_wtg;
        $aria_obj->navigation_wtg = $count_n_wtg;
        $aria_obj->aria_wtg = $count;
        return $aria_obj;

    }

    public static function marqueeTest($url)
    {

        $html = file_get_contents($url);

        $doc  = new \DOMDocument();
        @$doc->loadHTML($html);

        $tags1 = $doc->getElementsByTagName('marquee');


        $a = $tags1->length;
        if($a==0)
        {
            $flag_e = "No";
            $count  = self::MARQUEE;
        }
        else
        {
            $flag_e = "Yes";
            $count  = (0 * self::MARQUEE);
        }

        $marquee_obj = new \stdClass();
        $marquee_obj->marquee_status = $flag_e;
        $marquee_obj->marquee_wtg = $count;
        return $marquee_obj;
    }
    public static function blinkTest($url)
    {

        $html = file_get_contents($url);

        $doc = new \DOMDocument();
        @$doc->loadHTML($html);

        $tags1 = $doc->getElementsByTagName('blink');


        $a = $tags1->length;
        if($a == 0)
        {
            $flag_e = "No";
            $count  = self::BLINK;
        }
        else
        {
            $flag_e = "Yes";
            $count  = (0 * self::BLINK);
        }

        $blink_obj = new \stdClass();
        $blink_obj->blink_status = $flag_e;
        $blink_obj->blink_wtg = $count;
        return $blink_obj;

    }

    public static function fieldSetTest($url)
    {
        $html = file_get_contents($url);

        $doc = new \DOMDocument();
        @$doc->loadHTML($html);

        $tags = $doc->getElementsByTagName('fieldset');
        $tag  = $doc->getElementsByTagName('legend');


        $field_set = $tags->length  ;
        $legend    = $tag->length ;

        if($field_set == $legend){

            if (empty($field_set)) {
                $count = self::FIELD_SET;
            }
            else{
                $count = self::FIELD_SET;
            }
        }
        else {
//devide by zero
            $count = ($legend/$field_set)* self::FIELD_SET;
        }

        $field_obj = new \stdClass();
        $field_obj->total_field_set = $field_set;
        $field_obj->total_legend = $legend;
        $field_obj->field_set_wtg = $count;
        return $field_obj;

    }

    public static function longDescTest($url)
    {
        $count_long = 0;
        $html = file_get_contents($url);

        $doc  = new \DOMDocument();
        @$doc->loadHTML($html);

        $tags = $doc->getElementsByTagName('img');

        foreach ($tags as $tag) {
            $tag->getAttribute('longdesc');
            if($tag->getAttribute('longdesc'))
                $count_long++;

        }

        $total_img = $tags->length ;
        if($total_img == $count_long){

            if (empty($total_img)) {
                $wtg_long_desc = self::LONG_DESC;
            }
            else{
                $wtg_long_desc = self::LONG_DESC;
            }
        }
        else {

            $wtg_long_desc = ($count_long / $total_img) * self::LONG_DESC;
        }



        $long_obj = new \stdClass();
        $long_obj->total_images = $total_img;
        $long_obj->total_long_desc = $count_long;
        $long_obj->long_desc_wtg = $wtg_long_desc;
        return $long_obj;


    }

    public static function videoTest($url)
    {

        $count  = 0;
        $count1 = 0;
        $count2 = 0;
        $count3 = 0;
        $count4 = 0;
        $count_a = 0;
        $count_b  = 0;
        $count_c = 0;
        $count_d = 0;

        $html = file_get_contents($url);

        $doc = new \DOMDocument();
        @$doc->loadHTML($html);

        $tags1 = $doc->getElementsByTagName('iframe');
        $tags2 = $doc->getElementsByTagName('object');
        $tags3 = $doc->getElementsByTagName('embed');
        $tags4 = $doc->getElementsByTagName('video');
        $tags5 = $doc->getElementsByTagName('relatetranscript');

        foreach ($tags1 as $tag) {
            $tag->getAttribute('relatetranscript');
            if($tag->getAttribute('relatetranscript'))
                $count_a++;

        }
        foreach ($tags2 as $tag) {
            $tag->getAttribute('relatetranscript');
            if($tag->getAttribute('relatetranscript'))
                $count_b++;

        }
        foreach ($tags3 as $tag) {
            $tag->getAttribute('relatetranscript');
            if($tag->getAttribute('relatetranscript'))
                $count_c++;

        }
        foreach ($tags4 as $tag) {
            $tag->getAttribute('relatetranscript');
            if($tag->getAttribute('relatetranscript'))
                $count_d++;

        }
        $a = $tags1->length ;
        $b = $tags2->length  ;
        $c = $tags3->length  ;
        $d = $tags4->length ;

        $e = $tags5->length ;
        $count = $a+$b+$c+$d;

        $search_for_1 = 'kind="transcript"';
        $search_for_2 = 'rel="transcript"';
        $search_for_3 = 'itemprop="transcript"';

        // the following line prevents the browser from parsing this as HTML.
        header('Content-Type: text/plain');

        // get the file contents, assuming the file to be readable (and exist)
        $contents = $html;

        // escape special characters in the query
        $pattern1 = preg_quote($search_for_1, '/');
        $pattern2 = preg_quote($search_for_2, '/');
        $pattern3 = preg_quote($search_for_3, '/');

        // finalise the regular expression, matching the whole line
        $pattern1 = "/^.*$pattern1.*\$/m";
        $pattern2 = "/^.*$pattern2.*\$/m";
        $pattern3 = "/^.*$pattern3.*\$/m";

        // search, and store all matching occurences in $matches
        if(preg_match_all($pattern1, $contents, $matches1)){
            $count1++;
        }
        if(preg_match_all($pattern2, $contents, $matches2)){
            $count2++;
        }
        if(preg_match_all($pattern3, $contents, $matches3)){
            $count3++;
        }
        $count4=$count_a+$count_b+$count_c+$count_d;

        $countT=$count1+$count2+$count3+$count4+$e;

        $countT;

        if($count == $countT){

            if (empty($count)) {


                $video_wtg = self::VIDEO;

            }
            else{

                $video_wtg = self::VIDEO;
            }
        }
        else {

            $video_wtg = ($countT / $count) * self::VIDEO;
        }


        $video_obj = new \stdClass();
        $video_obj->total_videos = $count;
        $video_obj->total_transcripts = $countT;
        $video_obj->video_wtg = $video_wtg;
        return $video_obj;


    }
} 
-->
</body>
</html>

